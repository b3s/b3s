<%
  anchor ||= nil
  pagination_params ||= {}

  # Solr results have offset, while ARel results need offset_value
  offset = p.respond_to?(:offset_value) ? p.offset_value : p.offset

%>
<div class="pagination">
  <% if p.total_pages > 1 %><div class="links">
    <span class"prev_page"><i class="fa fa-chevron-left"></i><%= link_to_if p.previous_page, "Prev".html_safe, {page: p.previous_page, anchor: anchor}.merge(pagination_params), class: :prev_page_link %></span>

    <% if np = nearest_pages(p) %>
      <% if np.first > 1 %>
        <span class="first_page"><%= link_to_unless((p.current_page == 1), "1", {page: 1, anchor: anchor}.merge(pagination_params)), class: :first_page_link %></span>
      <% end %>
      <% if np.first > 2 %>
        <span class="ellipsis">&hellip;</span>
      <% end %>
      <% np.each do |np| %>
        <span class="number_page"><%= link_to_unless((p.current_page == np), np, {page: np, anchor: anchor}.merge(pagination_params)), class: :number_page_link %></span>
      <% end %>
      <% if np.last < (p.total_pages - 1) %>
        <span class="ellipsis">&hellip;</span>
      <% end %>
      <% if np.last < p.total_pages %>
        <span class="last_page"><%= link_to_unless((p.current_page == p.total_pages), "#{p.total_pages}", {page: p.total_pages, anchor: anchor}.merge(pagination_params)), class: :last_page_link %></span>
      <% end %>
    <% end %>

    <span class="next_page"><%= link_to_if p.next_page, "Next".html_safe, {page: p.next_page, anchor: anchor}.merge(pagination_params), class: :next_page_link %><i class="fa fa-chevron-right"></i></span>
  </div><% end %>
  <div class="items">
    <span class="shown_items"><%= offset + 1 %></span> to <span class="shown_items_count"><%= offset + p.length %></span> of <span class="total_items_count"><%= p.total_count %></span>
  </div>
</div>
